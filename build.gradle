plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

description = 'Java MYA API'
group 'org.jlab'
version new File("${projectDir}/VERSION").text
ext.releaseDate = new Date().format('MMM dd yyyy')

tasks.withType(JavaCompile) {
    options.release = 8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
    testImplementation 'junit:junit:4.13.2'
}

processIntegrationResources {
    duplicatesStrategy = 'include'
}

compileJava   {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

compileTestJava {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

task localhostIntegrationTest(type: Test) {
    description = 'Runs integration tests on localhost.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }

    environment 'JMYAPI_USE_PROXY', 'true'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }
}

task hello (type: JavaExec) {
    group 'Application'
    description 'Hello World Test'
    mainClass = 'org.jlab.mya.HelloWorld'
    classpath = sourceSets.test.runtimeClasspath
}

task config {
    doLast {
        def console = System.console()
        if (console) {
            def username = console.readLine('> Please enter mya username: ')
            def password = console.readPassword('> Please enter mya password: ')
            new File("$projectDir/config/credentials.properties").text = """username=$username
password=$password
"""
        } else {
            logger.error "Cannot get console, try running as: 'gradlew -Dorg.gradle.daemon=false config'"
        }
    }
}

javadoc {
    options.overview = "src/overview.html"
    options.source = 8
    options.with {
        links 'https://devdocs.io/openjdk~8/'
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications
}

publishing {
    repositories {
        maven {
            name "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("ossrh.user") ?: System.getenv("OSSRH_USER")
                password = project.findProperty("ossrh.token") ?: System.getenv("OSSRH_TOKEN")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/JeffersonLab/jmyapi")
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        publications {
            maven(MavenPublication) {
                from(components.java)
                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/JeffersonLab/jmyapi"
                    licenses {
                        license {
                            name = "The MIT License"
                            url = "https://github.com/JeffersonLab/jmyapi/blob/master/LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "slominskir"
                            name = "Ryan Slominski"
                            email = "ryans@jlab.org"
                        }
                        developer {
                            id = "apcarp"
                            name = "Adam Carpenter"
                            email = "adamc@jlab.org"
                        }
                    }
                    scm {
                        url = "https://github.com/JeffersonLab/jmyapi.git"
                    }
                }
            }
        }
        artifacts {
            archives javadocJar, sourcesJar
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}