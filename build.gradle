plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.bintray' version "1.8.5"
}

description = 'Java MYA API'
group 'org.jlab'
version '6.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    //testImplementation.extendsFrom compileOnly
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.42'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    testImplementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.7.0'
    integrationImplementation 'org.testcontainers:testcontainers:1.14.3'
}

compileJava   {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

compileTestJava {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    //shouldRunAfter test

    testLogging {
        showStandardStreams = true
    }
}

//check.dependsOn integrationTest

task hello (type: JavaExec) {
    group 'Application'
    description 'Hello World Test'
    main = 'org.jlab.mya.HelloWorld'
    classpath = sourceSets.test.runtimeClasspath
}

task config {
    doLast {
        def console = System.console()
        if (console) {
            def username = console.readLine('> Please enter mya username: ')
            def password = console.readPassword('> Please enter mya password: ')
            new File("$projectDir/src/main/resoureces/credentials.properties").text = """username=$username
password=$password
"""
        } else {
            logger.error "Cannot get console, try running as: 'gradlew -Dorg.gradle.daemon=false config'"
        }
    }
}

// This is dumb, but works.  I can't get Gradle to add config dir to classpath when running JUnit tests so I move the
// properties files where Gradle expects them.   But now I have to tell Gradle to not package our passwords
// into the jar file!
jar {
    exclude('credentials.properties', 'deployments.properties', 'credentials.properties.template', 'deployments.properties.template')
}

javadoc {
    options.overview = "src/overview.html"
    //source = sourceSets.main.allJava
    //classpath = sourceSets.main.allSource
    options.with {
        links 'https://docs.oracle.com/javase/8/docs/api/'
        //links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "slominskir"
            name "Ryan Slominski"
            email "ryans@jlab.org"
        }
        developer {
            id "apcarp"
            name "Adam Carpenter"
            email "adamc@jlab.org"
        }
    }

    scm {
        url "https://github.com/JeffersonLab/jmyapi"
    }
}

publishing {
    publications {
        ProjectPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId project.name
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['ProjectPublication']

    pkg {
        repo = 'maven'
        name = project.name
        licenses = ['MIT']
        vcsUrl = 'https://github.com/JeffersonLab/jmyapi.git'
        version {
            name = project.version
        }
    }
}