plugins {
    id 'java-library'
    id "com.vanniktech.maven.publish" version "0.34.0"
}

description = 'Java MYA API'
group = 'org.jlab'
version = new File("${projectDir}/VERSION").text.trim()
ext.version = project.version
ext.releaseDate = new Date().format('MMM dd yyyy')

tasks.withType(JavaCompile).configureEach {
    options.release = 11
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
compileTestJava {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}
repositories {
    mavenCentral()
}
sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}
dependencies {
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
    testImplementation 'junit:junit:4.13.2'
}
test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
}
tasks.register('localhostIntegrationTest', Test) {
    description = 'Runs integration tests on localhost.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }

    environment 'JMYAPI_USE_PROXY', 'true'
}
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }
}
tasks.register('hello', JavaExec) {
    group = 'Application'
    description = 'Hello World Test'
    mainClass = 'org.jlab.mya.HelloWorld'
    classpath = sourceSets.test.runtimeClasspath
}
tasks.register('config') {
    doLast {
        def console = System.console()
        if (console) {
            def username = console.readLine('> Please enter mya username: ')
            def password = console.readPassword('> Please enter mya password: ')
            new File("$projectDir/config/credentials.properties").text = """username=$username
password=$password
"""
        } else {
            logger.error "Cannot get console, try running as: 'gradlew -Dorg.gradle.daemon=false config'"
        }
    }
}
javadoc {
    options.overview = "src/overview.html"
    options.source = 11
    options.with {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api'
    }
}
mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()
    coordinates("org.jlab", "jmyapi", version)

    pom {
        name = project.name
        description = project.description
        url = "https://github.com/JeffersonLab/jmyapi/"
        licenses {
            license {
                name = "The MIT License"
                url = "https://github.com/JeffersonLab/jmyapi/blob/master/LICENSE"
            }
        }
        developers {
            developer {
                id = "slominskir"
                name = "Ryan Slominski"
                url = "https://github.com/slominskir/"
            }
            developer {
                id = "apcarp"
                name = "Adam Carpenter"
                url = "https://github.com/apcarp/"
            }
        }
        scm {
            url = "https://github.com/JeffersonLab/jmyapi"
            connection = "scm:git:git://github.com/JeffersonLab/jmyapi.git"
            developerConnection = "scm:git:ssh://git@github.com/JeffersonLab/jmyapi.git"
        }
    }
}